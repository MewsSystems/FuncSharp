using System.Collections.Generic;
using System.Linq;

namespace FuncSharp.Tests.Generative;

/// <summary>
/// Shrinkers are used for lowering the value generated by generators. So that if a test fails, the test framework will try reducing the value to find the lowest failing value.
/// </summary>
internal class OptionShrinkers
{
    internal IEnumerable<Option<short>> Short(Option<short> option)
    {
        if(option.NonEmpty)
            yield return Option.Valued((short)(option.GetOrDefault() - 1));
    }

    internal IEnumerable<Option<List<short>>> ShortList(Option<List<short>> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Empty<List<short>>();
            yield return option.Map(l => l.Select(i => (short)(i - 1)).ToList());
            yield return option.Map(l => l.Skip(1).ToList());
            yield return option.Map(l => l.SkipLast(1).ToList());
        }
    }

    internal IEnumerable<Option<short?>> NullableShort(Option<short?> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Valued((short?)(option.GetOrDefault() - 1));
            yield return Option.Valued((short?)null);
            yield return Option.Empty<short?>();
        }
    }

    internal IEnumerable<Option<int>> Int(Option<int> option)
    {
        if(option.NonEmpty)
            yield return Option.Valued(option.GetOrDefault() - 1);
    }

    internal IEnumerable<Option<List<int>>> IntList(Option<List<int>> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Empty<List<int>>();
            yield return option.Map(l => l.Select(i => i - 1).ToList());
            yield return option.Map(l => l.Skip(1).ToList());
            yield return option.Map(l => l.SkipLast(1).ToList());
        }
    }

    internal IEnumerable<Option<int?>> NullableInt(Option<int?> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Valued(option.GetOrDefault() - 1);
            yield return Option.Valued((int?)null);
            yield return Option.Empty<int?>();
        }
    }

    internal IEnumerable<Option<long>> Long(Option<long> option)
    {
        if(option.NonEmpty)
            yield return Option.Valued(option.GetOrDefault() - 1);
    }

    internal IEnumerable<Option<List<long>>> LongList(Option<List<long>> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Empty<List<long>>();
            yield return option.Map(l => l.Select(i => i - 1).ToList());
            yield return option.Map(l => l.Skip(1).ToList());
            yield return option.Map(l => l.SkipLast(1).ToList());
        }
    }

    internal IEnumerable<Option<long?>> NullableLong(Option<long?> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Valued(option.GetOrDefault() - 1);
            yield return Option.Valued((long?)null);
            yield return Option.Empty<long?>();
        }
    }

    internal IEnumerable<Option<decimal>> Decimal(Option<decimal> option)
    {
        if(option.NonEmpty)
            yield return Option.Valued(option.GetOrDefault() - 0.1m);
    }

    internal IEnumerable<Option<List<decimal>>> DecimalList(Option<List<decimal>> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Empty<List<decimal>>();
            yield return option.Map(l => l.Select(i => i - 1).ToList());
            yield return option.Map(l => l.Skip(1).ToList());
            yield return option.Map(l => l.SkipLast(1).ToList());
        }
    }

    internal IEnumerable<Option<decimal?>> NullableDecimal(Option<decimal?> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Valued(option.GetOrDefault() - 0.1m);
            yield return Option.Valued((decimal?)null);
            yield return Option.Empty<decimal?>();
        }
    }

    internal IEnumerable<Option<double>> Double(Option<double> option)
    {
        if(option.NonEmpty)
            yield return Option.Valued(option.GetOrDefault() - 0.1d);
    }

    internal IEnumerable<Option<List<double>>> DoubleList(Option<List<double>> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Empty<List<double>>();
            yield return option.Map(l => l.Select(i => i - 1).ToList());
            yield return option.Map(l => l.Skip(1).ToList());
            yield return option.Map(l => l.SkipLast(1).ToList());
        }
    }

    internal IEnumerable<Option<double?>> NullableDouble(Option<double?> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Valued(option.GetOrDefault() - 0.1d);
            yield return Option.Valued((double?)null);
            yield return Option.Empty<double?>();
        }
    }

    internal IEnumerable<Option<ReferenceType>> ReferenceType(Option<ReferenceType> option)
    {
        if(option.NonEmpty)
            yield return Option.Valued(new ReferenceType(option.GetOrDefault().Value - 1));
    }

    internal IEnumerable<Option<List<ReferenceType>>> ReferenceTypeList(Option<List<ReferenceType>> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Empty<List<ReferenceType>>();
            yield return option.Map(l => l.Select(t => new ReferenceType(t.Value - 1)).ToList());
            yield return option.Map(l => l.Skip(1).ToList());
            yield return option.Map(l => l.SkipLast(1).ToList());
        }
    }

    internal IEnumerable<Option<ReferenceTypeBase>> ReferenceTypeBase(Option<ReferenceTypeBase> option)
    {
        if(option.NonEmpty)
            yield return Option.Valued(new ReferenceTypeBase(option.GetOrDefault().BaseValue - 1));
    }

    internal IEnumerable<Option<List<ReferenceTypeBase>>> ReferenceTypeBaseList(Option<List<ReferenceTypeBase>> option)
    {
        if(option.NonEmpty)
        {
            yield return Option.Empty<List<ReferenceTypeBase>>();
            yield return option.Map(l => l.Select(t => new ReferenceTypeBase(t.BaseValue - 1)).ToList());
            yield return option.Map(l => l.Skip(1).ToList());
            yield return option.Map(l => l.SkipLast(1).ToList());
        }
    }
}
