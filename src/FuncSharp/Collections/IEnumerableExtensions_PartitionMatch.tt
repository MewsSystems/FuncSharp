<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
using System;
using System.Collections.Generic;

namespace FuncSharp
{
    public static partial class IEnumerableExtensions
    {
<#  for (var i = 1; i < MaxArity(); i++) { #>

        /// <summary>
        /// For each partition (collection of n-th coproduct elements), invokes the specified function.
        /// </summary>
        public static void PartitionMatch<#= TypeBracket(i) #>(
            this IEnumerable<<#= CoproductType(i) #>> source,
<#= Lines(i, x => Indent(12) + "Action<IReadOnlyList<" + Type(x) + ">> f" + x, separator: ",") #>)
        {
<#= Lines(i, x => Indent(12) + "var list" + x + " = new List<T" + x + ">();") #>

            foreach (var c in source)
            {
                c.Match(
<#= Lines(i, x => Indent(20) + "c" + x + " => list" + x + ".Add(c" + x + ")", separator: ",") #>
                );
            }

<#= Lines(i, x => Indent(12) + "f" + x + "(list" + x + ");") #>
        }

        /// <summary>
        /// For each partition (collection of n-th coproduct elements), invokes the specified function, aggregates results and returns them.
        /// </summary>
        public static IReadOnlyList<TResult> PartitionMatch<<#= FuncTypes(i) #>>(
            this IEnumerable<<#= CoproductType(i) #>> source,
<#= Lines(i, x => Indent(12) + "Func<IReadOnlyList<" + Type(x) + ">, IEnumerable<TResult>> f" + x, separator: ",") #>)
        {
            var result = new List<TResult>();

            source.PartitionMatch(
<#= Lines(i, x => Indent(16) + "c" + x + " => result.AddRange(f" + x + "(c" + x + "))", separator: ",") #>
            );

            return result;
        }
<#  } #>
    }
}