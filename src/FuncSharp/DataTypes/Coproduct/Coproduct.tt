<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../../CodeGen/Helpers.ttinclude" #>
using System;

namespace FuncSharp
{
    /// <summary>
    /// Base class and factory of canonical coproduct types.
    /// </summary>
    public abstract class Coproduct : ICoproduct
    {
        public Coproduct(int arity, int discriminator, object value)
        {
            if (arity <= 0)
            {
                throw new ArgumentException("The arity must be a positive number.");
            }
            if (discriminator < 1 || arity < discriminator)
            {
                throw new ArgumentException("The discriminator must be from interval [1, arity].");
            }

            CoproductArity = arity;
            CoproductDiscriminator = discriminator;
            CoproductValue = value;
        }

        public int CoproductArity { get; private set; }

        public int CoproductDiscriminator { get; private set; }

        public object CoproductValue { get; private set; }

<# for (var i = 1; i < MaxArity(); i++) { #>
<#    for (var j = 1; j <= i; j++) { #>
        /// <summary>
        /// Creates a new <#= i #>-dimensional coproduct with the <#= GetLowerOrdinal(i) #> value.
        /// </summary>
        public static <#= CoproductType(i) #> Create<#= GetOrdinal(j) #><#= TypeBracket(i) #>(<#= Type(j) #> value)
        {
            return new <#= CoproductTypeImpl(i) #>(value);
        }

<#    } #>
<# } #>
        public override int GetHashCode()
        {
            return this.CoproductHashCode();
        }

        public override bool Equals(object obj)
        {
            return this.CoproductEquals(obj);
        }

        public override string ToString()
        {
            return this.CoproductToString();
        }

        protected T GetCoproductValue<T>()
        {
            if (CoproductValue is T)
            {
                return (T)CoproductValue;
            }
            return default(T);
        }
    }

<# for (var i = 0; i < MaxArity(); i++) { #>
    /// <summary>
    /// A <#= i #>-dimensional immutable coproduct.
    /// </summary> 
    public class <#= CoproductTypeImpl(i) #> : Coproduct, <#= CoproductType(i) #>
    {
<#    if (i > 0) { #>
<#    for (var j = 1; j <= i; j++) { #>
        /// <summary>
        /// Creates a new <#= i #>-dimensional coproduct with the specified value on the <#= GetOrdinal(j).ToLowerInvariant() #> position.
        /// </summary>
        public Coproduct<#= i #>(<#= Type(j) #> <#= GetOrdinal(j).ToLowerInvariant() #>Value)
            : this(<#= j #>, <#= GetOrdinal(j).ToLowerInvariant() #>Value)
        {
        }

<#    } #>

        /// <summary>
        /// Creates a new <#= i #>-dimensional coproduct based on the specified source.
        /// </summary>
        public Coproduct<#= i #>(<#= CoproductType(i) #> source)
            : this(source.CoproductDiscriminator, source.CoproductValue)
        {
        }

        /// <summary>
        /// Creates a new <#= i #>-dimensional coproduct.
        /// </summary>
        /// <param name="discriminator">Discriminator of the value from interval [1, arity].</param>
        /// <param name="value">Value of the coproduct on the position defined by the discriminator.</param>
        protected Coproduct<#= i #>(int discriminator, object value)
            : base(<#= i #>, discriminator, value)
        {
        }

<#    for (var j = 1; j <= i; j++) { #>
        public bool Is<#= GetOrdinal(j) #>
        {
            get { return CoproductDiscriminator == <#= j #>; }
        }
<#    } #>

<#    for (var j = 1; j <= i; j++) { #>
        public IOption<<#= Type(j) #>> <#= GetOrdinal(j) #>
        {
            get { return Is<#= GetOrdinal(j) #> ? Option.Valued(GetCoproductValue<<#= Type(j) #>>()) : Option.Empty<<#= Type(j) #>>(); }
        }
<#    } #>

        public R Match<R>(
<#= Lines(i, x => Indent(12) + "Func<T" + x + ", R> " + IfIth(x), separator: ",") #>)
        {
            switch (CoproductDiscriminator)
            {
<#= Lines(i, x => Indent(16) + "case " + x + ": return " + IfIth(x) + "(GetCoproductValue<T" + x + ">());") #>
                default: return default(R);
            }
        }

        public void Match(
<#= Lines(i, x => Indent(12) + "Action<T" + x + "> " + IfIth(x) + " = null", separator: ",") #>)
        {
            switch (CoproductDiscriminator)
            {
<#= Lines(i, x => Indent(16) + "case " + x + ": if (" + IfIth(x) + " != null) { " + IfIth(x) + "(GetCoproductValue<T" + x + ">()); } break;") #>
            }
        }

<#    for (var j = 1; j <= i; j++) { #>
        public static implicit operator <#= CoproductTypeImpl(i) #>(T<#= j #> val)
        {
            return new <#= CoproductTypeImpl(i) #>(val);
        }
<#    } #>
<#    } else { #>
        protected Coproduct0()
            : base(0, 0, null)
        {
        }
<#    } #>
    }

<# } #>
}
