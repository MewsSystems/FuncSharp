<#+
    public int MaxArity()
    {
        return 21;
    }

    public int MaxProductArity()
    {
        return 8;
    }

    public int MaxCubeArity()
    {
        return 6;
    }

    public int MaxFuncArity()
    {
        return 16;
    }

    public string GetOrdinal(int i)
    {
        var ordinals = new[]
        {
            "Zeroth",
            "First",
            "Second",
            "Third",
            "Fourth",
            "Fifth",
            "Sixth",
            "Seventh",
            "Eighth",
            "Ninth",
            "Tenth",
            "Eleventh",
            "Twelfth",
            "Thirteenth",
            "Fourteenth",
            "Fifteenth",
            "Sixteenth",
            "Seventeenth",
            "Eighteenth",
            "Nineteenth",
            "Twentieth",
            "TwentyFirst"
        };

        if (i < ordinals.Count())
        {
            return ordinals[i];
        }
        return "???";
    }

    public string GetLowerOrdinal(int i)
    {
        return GetOrdinal(i).ToLowerInvariant();
    }

    public string Type(int i, string name = "T")
    {
        return name + i;
    }

    public string Types(int i, string name = "T", int? except = null, bool appendSeparator = false)
    {
        return List(i, x => Type(x, name), except: except, appendSeparator: appendSeparator);
    }

    public string TypeBracket(int i, string name = "T", int? except = null)
    {
        if (i == 0 || except.HasValue && i == 1)
        {
            return "";
        }
        return "<" + Types(i, name: name, except: except) + ">";
    }

    public string NaryType(string typeName, int n, string name, int? except = null)
    {
        var arity = n - (except.HasValue ? 1 : 0);
        return typeName + arity + TypeBracket(n, name: name, except: except);
    }

    public string ProductType(int i, string name = "T", int? except = null)
    {
        return NaryType("IProduct", i, name, except);
    }

    public string ProductImplType(int i, string name = "T", int? except = null)
    {
        return NaryType("Product", i, name, except);
    }

    public string CoproductType(int i, string name = "T")
    {
        return NaryType("ICoproduct", i, name);
    }

    public string CoproductImplType(int i, string name = "T")
    {
        return NaryType("Coproduct", i, name);
    }
    
    public string DataCubeType(int i, int? except = null, string positionType = "P", string valueType = "TValue")
    {
        return "DataCube" + (i - (except.HasValue ? 1 : 0)) + "<" + Types(i, name: positionType, except: except, appendSeparator: true) + valueType + ">";
    }

    public string PositionType(int i, string name = "P", int? except = null)
    {
        return NaryType("Position", i, name, except);
    }

    public string FuncTypes(int i, string resultTypeName = "TResult", string name = "T", int? except = null)
    {
        return Types(i, name, except, appendSeparator: true) + resultTypeName;
    }

    public string FuncType(int i, string resultTypeName = "TResult", string name = "T", int? except = null)
    {
        return "Func<" + FuncTypes(i, resultTypeName, name, except) + ">";
    }

    public string Value(int i, string name = "T")
    {
        return Type(i, name: name).ToLowerInvariant();
    }

    public string Values(int i, string name = "T", int? except = null) 
    {
        return Types(i, name: name).ToLowerInvariant();
    }

    public string Parameter(int i, string name = "T")
    {
        return Type(i, name: name) + " " + Value(i, name: name);
    }

    public string Parameters(int i, string name = "T", int? except = null, bool appendSeparator = false)
    {
        return List(i, x => Parameter(x, name: name), appendSeparator: appendSeparator);
    }

    public string Property(int i, string name = "Value", string accessor = "")
    {
        return accessor + name + i;
    }

    public string ProductProperty(int i, string accessor = "")
    {
        return Property(i, "ProductValue", accessor);
    }

    public string Properties(int i, string name = "Value", string accessor = "", int? except = null, bool appendSeparator = false) 
    {
        return List(i, x => Property(x, name, accessor), except, appendSeparator: appendSeparator);
    }

    public string Indent(int i)
    {
        return new String(' ', i);
    }

    public string List(int i, Func<int, string> itemGenerator, int? except = null, string separator = ", ", bool appendSeparator = false)
    {
        var numbers = Enumerable.Range(1, Math.Max(0, i));
        if (except.HasValue)
        {
            numbers = numbers.Except(new[] { except.Value });
        }
        var result = String.Join(separator, numbers.Select(itemGenerator));
        if (appendSeparator && !String.IsNullOrEmpty(result))
        {
            result += separator;
        }
        return result;
    }

    public string Lines(int i, Func<int, string> itemGenerator, int? except = null, string separator = "", bool appendSeparator = false)
    {
        return List(i, itemGenerator, except, separator + Environment.NewLine, appendSeparator);
    }

    public string IfIth(int i)
    {
        return "if" + GetOrdinal(i);
    }
#>