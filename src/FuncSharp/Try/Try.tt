<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace FuncSharp
{
    public static class Try
    {
        /// <summary>
        /// Tries the specified action and returns its result if it succeeds. Otherwise in case of the specified exception,
        /// returns result of the recovery function.
        /// </summary>
        public static A Catch<A, E>(Func<Unit, A> action, Func<E, A> recover)
            where E : Exception
        {
            try
            {
                return action(Unit.Value);
            }
            catch (E e)
            {
                return recover(e);
            }
        }

        /// <summary>
        /// Tries the specified action and returns a successful try if it succeeds. Otherwise in case of the specified exception,
        /// returns an erroneous try.
        /// </summary>
        public static Try<A, E> Catch<A, E>(Func<Unit, A> f)
            where E : Exception
        {
            return Catch<Try<A, E>, E>(
                _ => Success<A, E>(f(Unit.Value)),
                e => Error<A, E>(e)
            );
        }

        /// <summary>
        /// Creates a new try with a successful result.
        /// </summary>
        public static Try<A, E> Success<A, E>(A success)
        {
            return new Try<A, E>(success);
        }

        /// <summary>
        /// Creates a new try with an error result.
        /// </summary>
        public static Try<A, E> Error<A, E>(E error)
        {
            return new Try<A, E>(error);
        }

        /// <summary>
        /// Aggregates the tries using the specified function if all of them are successful. Otherwise aggregates the errors using the specified function.
        /// </summary>
        public static R Aggregate<A, E, R>(IEnumerable<Try<A, E>> tries, Func<IReadOnlyList<A>, R> success, Func<IReadOnlyList<E>, R> error)
        {
            var enumeratedTries = tries.ToList();
            if (enumeratedTries.All(t => t.IsSuccess))
            {
                return success(enumeratedTries.Select(t => t.Success).Flatten().ToList());
            }

            return error(enumeratedTries.Select(t => t.Error).Flatten().ToList());
        }

        /// <summary>
        /// Aggregates a collection of tries into a try of collection.
        /// </summary>
        public static Try<IReadOnlyList<A>, IReadOnlyList<E>> Aggregate<A, E>(IEnumerable<Try<A, E>> tries)
        {
            return Aggregate(
                tries,
                success: results => Success<IReadOnlyList<A>, IReadOnlyList<E>>(results),
                error: errors => Error<IReadOnlyList<A>, IReadOnlyList<E>>(errors)
            );
        }

        /// <summary>
        /// Aggregates a collection of tries into a try of collection.
        /// </summary>
        public static Try<IReadOnlyList<A>, IReadOnlyList<E>> Aggregate<A, E>(IEnumerable<Try<A, IReadOnlyList<E>>> tries)
        {
            return Aggregate(
                tries,
                success: results => Success<IReadOnlyList<A>, IReadOnlyList<E>>(results),
                error: errors => Error<IReadOnlyList<A>, IReadOnlyList<E>>(errors.SelectMany(e => e).ToList())
            );
        }
<#  for (var i = 2; i < MaxFuncArity(); i++) { #>

        /// <summary>
        /// Aggregates the tries using the specified function if all of them are successful. Otherwise aggregates the errors by the specified function.
        /// </summary>
        public static R Aggregate<<#= Types(i, name: "A") #>, E, R>(<#= List(i, x => $"Try<{Type(x, name: "A")}, E> t{x}") #>, Func<<#= Types(i, name: "A") #>, R> success, Func<IReadOnlyList<E>, R> error)
        {
            if (<#= List(i, x => $"t{x}.IsSuccess", separator: " && ") #>)
            {
                return success(<#= List(i, x => $"t{x}.Success.Get()") #>);
            }

            var errors = new[] { <#= List(i, x => $"t{x}.Error") #> };
            return error(errors.Flatten().ToList());
        }

        /// <summary>
        /// Aggregates the tries using the specified function if all of them are successful. Otherwise aggregates all errors into error result by concatenation.
        /// </summary>
        public static Try<R, IReadOnlyList<E>> Aggregate<<#= Types(i, name: "A") #>, R, E>(<#= List(i, x => $"Try<A{x}, E> t{x}") #>, Func<<#= Types(i, name: "A") #>, R> success)
        {
            return Aggregate(
                <#= List(i, x => $"t{x}") #>,
                success: (<#= List(i, x => $"s{x}") #>) => Success<R, IReadOnlyList<E>>(success(<#= List(i, x => $"s{x}") #>)),
                error: errors => Error<R, IReadOnlyList<E>>(errors)
            );
        }

        /// <summary>
        /// Aggregates the tries using the specified function if all of them are successful. Otherwise aggregates all errors into error result by concatenation.
        /// </summary>
        public static Try<R, IReadOnlyList<E>> Aggregate<<#= Types(i, name: "A") #>, R, E>(<#= List(i, x => $"Try<A{x}, IReadOnlyList<E>> t{x}") #>, Func<<#= Types(i, name: "A") #>, R> success)
        {
            return Aggregate(
                <#= List(i, x => $"t{x}") #>,
                success: (<#= List(i, x => $"s{x}") #>) => Success<R, IReadOnlyList<E>>(success(<#= List(i, x => $"s{x}") #>)),
                error: errors => Error<R, IReadOnlyList<E>>(errors.SelectMany(e => e).ToList())
            );
        }
<#  } #>
    }

    public class Try<A, E> : Coproduct2<A, E>
    {
        public Try(A success)
            : base(success)
        {
        }

        public Try(E error)
            : base(error)
        {
        }

        public bool IsSuccess
        {
            get { return IsFirst; }
        }

        public bool IsError
        {
            get { return IsSecond; }
        }

        public IOption<A> Success
        {
            get { return First; }
        }

        public IOption<E> Error
        {
            get { return Second; }
        }

        public Try<B, E> Map<B>(Func<A, B> f)
        {
            return Match(
                s => Try.Success<B, E>(f(s)),
                e => Try.Error<B, E>(e)
            );
        }

        public Try<A, F> MapError<F>(Func<E, F> f)
        {
            return Match(
                s => Try.Success<A, F>(s),
                e => Try.Error<A, F>(f(e))
            );
        }
    }
}
