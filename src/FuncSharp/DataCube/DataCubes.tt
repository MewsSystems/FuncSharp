<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace FuncSharp
{
<# for (var i = 0; i <= MaxCubeArity(); i++) { #>
    /// <summary>
    /// A <#= i #>-dimensional data cube.
    /// </summary>
    public class <#= DataCubeType(i) #> : DataCube<<#= PositionType(i) #>, TValue>
    {
        /// <summary>
        /// Creates an empty <#= i #>-dimensional data cube. 
        /// </summary>
        public DataCube<#= i #>()
        {
<#      for (var j = 1; j <= i; j++) { #>
            Domain<#= j #>Values = new HashSet<ValueTuple<P<#= j #>>>();
<#      } #>
        }

<#      if (i == 0) { #>
        /// <summary>
        /// The only value in the cube.
        /// </summary>
        public IOption<TValue> Value 
        { 
            get { return Get(); }
        }

<#      } #>
<#      for (var j = 1; j <= i; j++) { #>
        /// <summary>
        /// Positions of values in the <#= GetLowerOrdinal(j) #> dimension (domain of that dimension).
        /// </summary>
        public IEnumerable<P<#= j #>> Domain<#= j #>
        {
            get { return Domain<#= j #>Values.Select(v => v.Item1); }
        }

<#      } #>
<#      for (var j = 1; j <= i; j++) { #>
        private HashSet<ValueTuple<P<#= j #>>> Domain<#= j #>Values { get; }

<#      } #>
        /// <summary>
        /// Returns whether the cube contains a value at the specified position.
        /// </summary>
        public bool Contains(<#= Parameters(i, name: "P") #>)
        {
            return Contains(Position<#= i #>.Create(<#= Values(i, name: "P") #>));
        }

        /// <summary>
        /// Returns value at the specified position.
        /// </summary>
        public IOption<TValue> Get(<#= Parameters(i, name: "P") #>)
        {
            return Get(Position<#= i #>.Create(<#= Values(i, name: "P") #>));
        }

        /// <summary>
        /// Returns value at the specified position. If there is no value present, sets the position to value generated by 
        /// the <paramref name="setter"/> function and returns the newly generated value.
        /// </summary>
        public TValue GetOrElseSet(<#= Parameters(i, name: "P", appendSeparator: true) #>Func<Unit, TValue> setter)
        {
            return GetOrElseSet(Position<#= i #>.Create(<#= Values(i, name: "P") #>), setter);
        }
        
        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, overwrites it.
        /// </summary>
        public override TValue Set(<#= PositionType(i, name: "P") #> position, TValue value)
        {
<#      for (var j = 1; j <= i; j++) { #>
            AddDomain(Domain<#= j #>Values, position.ProductValue<#= j #>);
<#      } #>
            return base.Set(position, value);
        }

        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, overwrites it.
        /// </summary>
        public TValue Set(<#= Parameters(i, name: "P", appendSeparator: true) #>TValue value)
        {
            return Set(Position<#= i #>.Create(<#= Values(i, name: "P") #>), value);
        }

        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, returns result of the
        /// <paramref name="otherwise"/> function which is invoked with the current value.
        /// </summary>
        public TValue SetOrElse(<#= Parameters(i, name: "P", appendSeparator: true) #>TValue value, Func<TValue, TValue> otherwise)
        {
            return SetOrElse(Position<#= i #>.Create(<#= Values(i, name: "P") #>), value, otherwise);
        }

        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, updates it with the
        /// result of the <paramref name="updater"/> function which is given the present value and the new value.
        /// </summary>
        public TValue SetOrElseUpdate(<#= Parameters(i, name: "P", appendSeparator: true) #>TValue value, Func<TValue, TValue, TValue> updater)
        {
            return SetOrElseUpdate(Position<#= i #>.Create(<#= Values(i, name: "P") #>), value, updater);
        }

        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, updates it with the
        /// result of the <paramref name="updater"/> function which is given the present value and the new value.
        /// </summary>
        public TValue SetOrElseUpdate<TNewValue>(<#= Parameters(i, name: "P", appendSeparator: true) #>TNewValue value, Func<TNewValue, TValue> valueInitialization, Func<TValue, TNewValue, TValue> updater)
        {
            return SetOrElseUpdate<TNewValue>(Position<#= i #>.Create(<#= Values(i, name: "P") #>), value, valueInitialization, updater);
        }

        /// <summary>
        /// For each value in the cube, invokes the specified function passing in the position and the stored value.
        /// </summary>
        public void ForEach(Action<<#= Types(i, name: "P", appendSeparator: true) #>TValue> a)
        {
            ForEach((p, v) => a(<#= Properties(i, name: "ProductValue", accessor: "p.", appendSeparator: true) #>v));
        }

        /// <summary>
        /// Transforms each value in the cube using the specified function and returns a collection of the transformed values.
        /// </summary>
        public IReadOnlyList<T> Select<T>(Func<<#= Types(i, name: "P", appendSeparator: true) #>TValue, T> f)
        {
            return Select((p, v) => f(<#= Properties(i, name: "ProductValue", accessor: "p.", appendSeparator: true) #>v));
        }

        /// <summary>
        /// Transforms each value in the cube using the specified function and returns a concatenated collection of the transformed values.
        /// </summary>
        public IReadOnlyList<T> SelectMany<T>(Func<<#= Types(i, name: "P", appendSeparator: true) #>TValue, IEnumerable<T>> f)
        {
            return SelectMany((p, v) => f(<#= Properties(i, name: "ProductValue", accessor: "p.", appendSeparator: true) #>v));
        }

        /// <summary>
        /// Returns a new cube containing only the values that pass the specified predicate.
        /// </summary>
        public <#= DataCubeType(i) #> Where(Func<<#= PositionType(i) #>, TValue, bool> predicate)
        {
            return Where<<#= DataCubeType(i) #>>(predicate);
        }
<#      for (var j = 0; j <= i; j++) { #>

        /// <summary>
        /// Transforms the current cube into a new cube. The transformation is directed by two functions. 
        /// The <paramref name="positionMapper"/> maps position of values in the current cube into position 
        /// in the new cube. If there are multiple values in the current cube, whose positions are mapped onto 
        /// the same position in the new cube, then the <paramref name="aggregator"/> function is used to 
        /// aggregate all the colliding values into one value.
        /// </summary>
        public <#= DataCubeType(j, positionType: "Q") #> Transform<#= TypeBracket(j, name: "Q") #>(Func<<#= PositionType(i) #>, <#= PositionType(j, name: "Q") #>> positionMapper, Func<TValue, TValue, TValue> aggregator)
        {
            return Transform<<#= PositionType(j, name: "Q") #>, <#= DataCubeType(j, positionType: "Q") #>>(positionMapper, aggregator);
        }

        /// <summary>
        /// Transforms the current cube into a new cube. The transformation is directed by two functions. 
        /// The <paramref name="positionMapper"/> maps position of values in the current cube into positions 
        /// in the new cube. If there are multiple values in the current cube, whose positions are mapped onto 
        /// the same position in the new cube, then the <paramref name="aggregator"/> function is used to 
        /// aggregate all the colliding values into one value.
        /// </summary>
        public <#= DataCubeType(j, positionType: "Q") #> MultiTransform<#= TypeBracket(j, name: "Q") #>(Func<<#= PositionType(i) #>, IEnumerable<<#= PositionType(j, name: "Q") #>>> positionMapper, Func<TValue, TValue, TValue> aggregator)
        {
            return MultiTransform<<#= PositionType(j, name: "Q") #>, <#= DataCubeType(j, positionType: "Q") #>>(positionMapper, aggregator);
        }
<#          if (j > 0) { #>

        /// <summary>
        /// Transforms the current <#= i #>-dimensional cube into a <#= i - 1 #>-dimensional cube by excluding the dimension <#= j #>.
        /// All values whose position differ just in dimension <#= j #> (their positions without dimension <#= j #> are the same) are 
        /// aggregated using the <paramref name="aggregator"/> function into one value. This value is stored into the new cube with the 
        /// position without dimension <#= j #>.
        /// </summary>
        public <#= DataCubeType(i, except: j) #> RollUpDimension<#= j #>(Func<TValue, TValue, TValue> aggregator)
        {
            return Transform(p => p.ExceptValue<#= j #>, aggregator);
        }

        /// <summary>
        /// Slices the current cube in the dimension <#= j #>. The slices are <#= i - 1 #>-dimensional cubes without dimension <#= j #> of
        /// the current cube. Returns a new 1-dimensional cube where the values are the slices and the positions are values in 
        /// the sliced dimension.
        /// </summary>
        public DataCube1<<#= Type(j, name: "P") #>, <#= DataCubeType(i, except: j) #>> SliceDimension<#= j #>()
        {
            var slices = new DataCube1<<#= Type(j, name: "P") #>, <#= DataCubeType(i, except: j) #>>();
            ForEach((p, v) =>
            {
                var slice = slices.GetOrElseSet(p.ProductValue<#= j #>, _ => new <#= DataCubeType(i, except: j) #>());
                slice.Set(p.ExceptValue<#= j #>, v);
            });
            return slices;
        }
<#          } #>
<#      } #>
    }

<# } #>
}